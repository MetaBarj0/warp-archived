Main features of spark
----------------------

Build parsers at compile time and expose them both at compile-time and run-time.
First, deal with regular grammar, then with context-free grammars.
Parsers exposed will be used with transcription features, allowing infinite
transformation of recognized languages. These transcription features must be
usable both with regular grammars and context-free grammars.
spark is : transcription algorithms, grammars, transducers.
spark deals with : user input at compile-time and run-time.
The goal of spark is provide facilities to transcript user input in user output
using grammars. Input can either be specified at compile time or run-time.

Compile time user input has a form of integral sequence. It is especially useful
for the user to define custom grammars. An exemple of such an user input is
showed in implementing the regular grammar of spark.

Run time user input has a form of an iterable sequence formed by a pair of
iterator. It is especially useful to parse/transform the input to an output
accessible to the run time as well (for instance a JSON parser).

  1.2°) Context-free grammars
  2.2°) Transcription algorithms for run-time
3°) Transducers
  3.1°) Transducers for compile-time
  3.2°) Transducers for run-time
4°) Implementing the regular grammar as study case
  4.1°) Checking validity of grammar
  4.2°) C++ type system for regular grammars
    4.2.1°) The symbol type
    4.2.2°) The group type
    4.2.3°) The automaton type system
      4.2.3.1°) The automaton structure
        4.2.3.1.1°) States
          4.2.3.1.1.1°) C++ types for states
        4.2.3.1.2°) Transition functions
          4.2.3.1.2.1°) Epsilon transitions
          4.2.3.1.2.2°) C++ types for transition functions
        4.2.3.1.3°) Group commands
          4.2.3.1.3.1°) Capturing group command
          4.2.3.1.3.2°) Finishing group command
          4.2.3.1.3.3°) Resetting group command
          4.2.3.1.3.4°) C++ types for group commands
        4.2.3.1.4°) C++ types for automaton
      4.2.3.2°) Building an automaton from a symbol
      4.2.3.3°) Building an automaton from a group
      4.2.3.4°) Algorithm to create/alter automaton
        4.2.3.4.1°) Creating a new automaton
        4.2.3.4.2°) Apply an unary closure algorithm
        4.2.3.4.3°) Apply a binary closure algorithm


  1.2°) Context-free grammars
  ---------------------------
So far, not enough elements have been thought about to clearly specify how CFG
should work. More on that later.

3°) Transducers
---------------

  3.1°) Transducers for compile-time
  ----------------------------------

  3.2°) Transducers for run-time
  ------------------------------

4°) Implementing the regular grammar as study case
--------------------------------------------------
Regarding how regular grammar works, it is easy to make a parallel between the
main grammar entities and template types. At least, I can extract the group and
the symbol entities and make template types that could be parametered with some
constants and types.
Considering that, it's important to note that entity specified in transcription
algorithms come from the user world. The language specified is defined by the
user, the grammar is defined by the user and, the transducers are defined by
the user. Thus, all of these must be checked for validity, especially the
grammar which need to be transformed first from a string to a template
expression.

  4.1°) Checking validity of grammar
  ----------------------------------
From the spark's user point of view, a regular grammar definition is one of the
operand to use in transcription algorithms (other operands being the language
and the transducers).
When the user use the grammar in a transcription algorithm, the grammar template
is instantiated and a rough check is made about the grammar definition traits.
For instance, the grammar type must expose either a static constexpr value
member/function which the type or the returning type respectively is a char
buffer or a static constexpr array containing char buffers (see 1.1.4.1°).
Once the grammar passes this test, it must be transformed into something able to
parse the user-input language. And guess what is the most suitable to transform
something into another thing? A transcription algorithm for sure! And in order
to do so, the regular grammar definition string need to be transformed into an
integral sequence. This integral sequence will be used as a compile-time user
input. In other word, the grammar become a language. But what is able to parse
that language if there is not anymore grammar?

  4.2°) C++ type system for regular grammars
  ------------------------------------------
Main entities of a regular grammar are the symbols and the groups. A C++ type
system will be created using these concepts.

    4.2.1°) The symbol type
    -----------------------
Regarding the symbol definition in a regular grammar (see 1.1.2°) you can see
the symbol can have several types :
- inclusive : recognizing a specific letter whose type depends on the type of
  the regular grammar definition string
- exclusive : recognizing all but specified characters. Types of letter depends
  of the type of the regular grammar definition string
- any : recognize anything.
Regarding these facts, it's easy to imagine a set of enumerator to describe
symbol types, then, create a set of template specialization for the symbol type.
- A specialization dealing with inclusive symbol type, that does take a letter
  sequence containing only one element. Indeed an inclusive symbol can only
  recognize one letter. As all other symbol template specialization, it has a
  name.
- A specialization dealing with exclusive symbol type, that does take a letter
  sequence containing one or more elements giving letter excluded of the
  recognition process. As all other symbol template specialization, it has a
  name.
- A specialization dealing with the 'any' symbol type, that does not take any
  letter sequence. As all other symbol template specialization, it has a name.

To see the implementation details, take a look at the src/warp/spark/symbol.hpp
and src/warp/spark/symbol_traits.hpp files.

    4.2.2°) The group type
    ----------------------
Writing group techniques are described in 1.1.3°. Regarding that, some core
group components can be easily conceptualized and extracted into some template
expression. Indeed, a group is a piece of stuff applying some operations on some
operands after all.
Talking about operations, there is two major kind of operations called closures
and they are :
- unary closure type, also know as quantifiers. They are very close of regular
  expression quantifiers (?, * and +). It exists four types of quantifiers (see
  in 1.1.3.2.1.2° to 1.1.3.2.1.5°). Unary closures are applied both on symbol
  and group type.
- binary closure type. They are used to 'assemble' part of the grammar
  together. A part of a grammar is actually a group. These binary closures works
  on two group operands.
Considering how a group can be defined using different closure types, there is
ten specializations of group template that can be written :
- Specializations dealing with each unary closure applied on symbol types (four)
  and on group types (four); giving eight specializations.
- Specializations dealing with binary closure types (two) acting only on group
  operands.

To see the implementation details, take a look at the src/warp/spark/group.hpp
and src/warp/spark/group_traits.hpp files.

    4.2.3°) The automaton type system
    ---------------------------------
The automaton type system represents a set of types and meta-algorithms able to
translate a group or a symbol into a deterministic finite automaton. The purpose
here is to be able to parse some language using a high level, previously defined
grammar. A parsing is a process in which each character read from an input
language is tested using a built automaton. If the character is recognized by
the automaton, the test passes, otherwise it fails. The automaton updates its
state for each character read.
As an example, here is the automaton corresponding to a group applying the one
to one closure on an inclusive symbol recognizing the 'a' letter :

^-(a)->$

The '^' is the initial state of the automaton, the starting point. At all time
(when the automaton is fully built) it can have only one initial state.

The '-(a)->' sequence represents a transition function. To change the state of
this automaton from the initial one to the next one, you have to pass through a
transition function (-...->; ... being a symbol definition or an epsilon
transition, more on that later).

The '$' represents a final state of the automaton. An automaton may have several
final state (at least one). As seen before, an automaton change its state for
each character read and, if the automaton reaches one of its final states AND
the input language is fully read, then, the regular language is recognized.

Another easy example to understand the automaton concept could be :

^-(a)->O-(b)->$

This one is pretty similar to the last one shown above. The difference is that
this automaton recognize the language 'ab'.
Here a new kind of automaton state is show : the 'O', it represents an
intermediate state, not final nor initial. An automaton may have several
intermediate states but it's not mandatory.
It is worth to note that the automaton is the lowest level representation of a
regular grammar.
Described as above, an automaton can test each character of an user input and
tell if yes or no the character gives this automaton a valid state but it
doesn't refresh the grammar status. Indeed, a grammar may be composed of several
groups, each group recognizing one or more letter from the user input. Hence, an
automaton and it is useful to the user to know if a character is a capture of a
specific group.

      4.2.3.1°) The automaton structure
      ---------------------------------
Automata are made of few things : states, transition functions and group
commands. Used together, these elements form a directed graph you can use to
recognize a regular language. Sections below will describe how are made these
simple elements.

        4.2.3.1.1°) States
        ------------------
As seen above, an automaton state can be seen as a particular status of the
automaton. It exists three kinds of state :
- Initial : this is the default state of an untouched automaton. It only exists
  one initial state per automaton and it is always the first one active.
- Intermediate : this is a state that is nor initial neither final. An automaton
  may have zero or more intermediate states. The only way to reach an
  intermediate state is to pass through a transition function from the initial
  state, a terminal state or another intermediate state.
- Final : It is a terminal state of an automaton. When the current status of the
  automaton points out a terminal state, half of the conditions are met to say
  that input language is recognized (the other half part being the input
  language has been totally read). An automaton has at least one terminal state.
  Note that an initial state can also be terminal, however, an intermediate
  state cannot be final.
Below is a schema showing states set and how the interact :

+--------------------------------------------+ As you can see, initial and final
|      Automaton state set interactions      | states can overlap leading to an
|                                            | automaton that have an initial
| +---------------------+                    | state that is also final.
| | initial             |                    | As initial state is unique
| |                     |   +--------------+ | throughout an automaton, it can
| | +-------------------+-+ | intermediate | | only exist at most one mixed
| | | initial and final | | +--------------+ | initial-final state per
| +-+-------------------+ |                  | automaton because an automaton
|   |                     |                  | can have only one initial state.
|   |               final |                  |
|   +---------------------+                  |
+--------------------------------------------+

Representing states in a schema gives :
- '^' for strictly initial state
- '$' for strictly final state
- 'O' for intermediate state
- '%' for initial and final state

As an example :

%-(a)->$

is an automaton similar to the 'a?' regular expression;

^-(a)->O-(b)->$

is an automaton similar to the 'ab' regular expression.

          4.2.3.1.1.1°) C++ types for states
          ----------------------------------
A state is a part of an automaton and an automaton have at least two states.
Moreover, a state has a specific type (four possibles).
As a result I can imagine how to define an automaton state using some templated
types parametered with :
- A state identifier
- A type of state
For the sake of flexibility, the state identifier will be an integral sequence,
allowing cool operations on them.
The state types can be easily designed as a scoped enumeration containing the
four values.
For more details, take a look at 'src/warp/spark/detail/automaton_state.hpp' and
'src/warp/spark/detail/automaton_state_traits.hpp'

        4.2.3.1.2°) Transition functions
        --------------------------------
This entity allow the automaton to changes its currently active state. A
transition function is made of few things :
- an identifier
- a source state in the automaton
- a target state in the automaton
- a predicate based on a symbol definition or an epsilon transition.

As stated above, each state of an automaton is identified using an integral
sequence. Hence, source and target states for a transition function can be
referenced using these identifiers.
In 1.1.2°, we saw how to write symbols and what they are.
The only new thing here is the epsilon transition.
Below are some example of transition functions :

-(a)->

is a transition function parametered with an inclusive symbol recognizing the
'a' letter

-(~bcd)->

is a transition function parametered with an exclusive symbol recognizing all
but the 'b', 'c' and 'd' letters

-(~)->

is a transition function parametered with the 'any' symbol

-()->

is a transition function parametered with the epsilon transition.

          4.2.3.1.2.1°) Epsilon transitions
          ---------------------------------
An epsilon transition is somewhat a null predicate. It shall be used in a
transition function and means that not any particular condition are needed to
pass from a state to another one in an automaton.
Hence, it adds undeterminism to the automaton. Because of that, epsilon
transition must be a temporary tool that will be used to compute an automaton
from undeterministic to deterministic and thus, a final and fully built
automaton shall not have any transition functions parametered with an epsilon
transition within. By the way, a transition function parametered with an epsilon
transition is represented as :

-()->

With nothing between parentheses, it really looks like an empty predicate.

          4.2.3.1.2.2°) C++ types for transition functions
          ------------------------------------------------
Four elements make the transition function :
- an identifier (integral sequence)
- a source identifier to an automaton state (integral sequence)
- a predicate (either a symbol or an epsilon transition)
- a target identifier to an automaton state (integral sequence)

These four elements could be seen as template parameter of a template type.
For more details, take a look at
'src/warp/spark/detail/automaton_t_function.hpp' and
'src/warp/spark/detail/automaton_t_function_traits.hpp'

        4.2.3.1.3°) Group commands
        --------------------------
The group command is a behavioral entity of the automaton. It is built at each
automaton closure operation or at each automaton built from a symbol. It is used
at each automaton transition function traversal.
Hence, it is the bridge between defined groups (in a regular grammar),
transducers and the underlying low-level automaton. Actually, when the
automaton passes from a state to another after a character test from the user
input (using the transition function), it is necessary to know which group is
capturing the character and if this group is finished. The group command is here
for that purpose. When triggered, a group command communicates to the transducer
at the transcription algorithm level to allow the user to take an action
depending of the type of the group command. It is related to a transition
function. Indeed, a transition function tests a symbol used as parameter. A
transition function may have several group command, indicating it is capturing
for a specific group, or finishing a specific group. This is the entity
allowing the use of user-defined transducers (see 3°).
As stated above, there is three kinds of group command :
- the finishing one, indicating a specific group has been finished after a
  transition function traversal with a specific symbol OR the end of the user
  input (if the related automaton is in a valid final state)
- the capturing one, indicating a specific group is being constructed by the
  traversal of a transition function with a specific symbol
Examples of application will be shown in automaton building sections 4.2.3.2°
and 4.2.3.3° sub-sections.

          4.2.3.1.3.1°) Capturing group command
          -------------------------------------
This is the most common and natural group command. It specifies a group is being
constructed by the traversal of a transition function when one character of the
user input is read.
Let's take as example this very simplistic regular grammar definition :

BEGIN_SYMBOLS;
  a = a;
END_SYMBOLS;
BEGIN_GROUPS;
  a = a;
END_GROUPS;

This grammar recognize the language 'a'. Though it is not really useful, it will
demonstrate how capturing group command are created.
Below is the automaton representation of the previously defined simple grammar :

^-(a)->$

This simple automaton contains only two states (one initial and one final) and
one transition function.
The group it represents is the one named 'a' in the regular grammar definition.
There will be a capturing group command attached to the transition function
indicating the character passing the transition function is captured for the 'a'
group. That's it.

          4.2.3.1.3.2°) Finishing group command
          -------------------------------------
The finishing group command denotes that a group has finished. It means not any
capture is necessary for the group construction. A finish group command is
emmited in two situations :
- a group is concatenated to another
- the user input has ended and the current state of the automaton is final.
Let's improve the gramar defined in previous sub-section by adding a new symbol
and a new group :

BEGIN_SYMBOLS;
  /* same as : a = a; b = b; */
  BASIC_SYMBOLS ab;
END_SYMBOLS;
BEGIN_GROUPS;
  /* same as : a = a; b = b; */
  SYMBOLS_AS_GROUPS a b;
  ab = a . b;
END_GROUPS;

Now, this grammar recognizes the language 'ab'. Not really useful as well, it
will demonstrate how finishing group commands are created.
Below is the automaton representation of the previously defined grammar :

^-(a)->O-(b)->$

The created 'a' group and 'b' group have their own capturing group commands.
But, when a concatenation closure is applied on these groups, all capturing
group commands linked to the first closure operand (capturing 'a' group for the
'a' group here) are used to create a finishing group command linked to the
epsilon transition. More details on that thing in 4.2.3.4.2° and related
sub-sections.

          4.2.3.1.3.4°) C++ types for group commands
          ------------------------------------------
As usual, a set of types has to be defined in order to conceptualize and include
the group command concept to the automaton. There will be a template type and
its associated traits class.
As stated above, in previous sub-section, we know a group command is related to
a transition function. A transition function is uniquely identified. This
identifier can be used to refer to the group command's related transition
function.
Moreover, there is three kind of group command : finishing, capturing and
resetting. It's perfect for a scoped enum.
Finally, a group command is designed to be applied on a group that is
user-named, so the name of the group has to be used as parameter.
For more details, take a look at :
'src/warp/spark/detail/automaton_g_command.hpp' and
'src/warp/spark/detail/automaton_g_command_traits.hpp' and
'src/warp/spark/detail/automaton_g_command_types.hpp'.

        4.2.3.1.4°) C++ types for automaton
        -----------------------------------
With all that was stated before, an automaton could be seen just as a container
of states transition functions and group commands. Such meta-types can be
expressed using templates and type sequences. As usual, the automaton type will
be empty. It is a template expressed with three template parameters :
- a type sequence containing all states of this automaton
- a type sequence containing all transition functions of this automaton
- a type sequence containing all group commands attached to transition functions
For more details, take a look at : 'src/warp/spark/detail/automaton.hpp' and
'src/warp/spark/detail/automaton_traits.hpp'.
Besides these structural types, there are some types that have been designed for
behavioral purposes such as automaton related algorithms. These algorithms can
be used to construct or alter automata, implementing the previously defined
groups' closures.

      4.2.3.2°) Building an automaton from a symbol
      ---------------------------------------------
The first algorithm, creating a brand new automaton. Despite the title indicates
this automaton will be built from a symbol, each automaton construction are
triggered at group level, leading an automaton to be another representation of a
group.
As stated in 1.1.2° and subsequent sub-sections, there is three kind of symbols,
inclusive, exclusive and any. All are dealing with character recognition. The
lead to construct automaton having only two states (an initial and a final) and
a transition function. One of the variable parts is located in the transition
function. Indeed, for an inclusive symbol (let's say, recognizing the 'a'
letter), building an automaton will end up with the following automaton :

^-(a)->$

The transition function is -(a)-> and shows that when a is passed to it, it
leads to the next state that is the final state.

Let's create an exclusive symbol ,recognizing all letters but a, b, c and d. As
stated just above, the resulting automaton will have two states, an initial and
a final. Here is the transition function :

-(~abcd)->

The '~' character specified at the beginning of the non-recognized letters means
all but these characters and thus, the full automaton looks like :

^---->(~abcd)---->$

The 'arrows' used to represent transition functions ca be extended at will
without changing the real meaning of the function and allowing easier to read
automaton diagrams.

The last flavor of symbol is the 'any' symbol. As usual, it will produce an
automaton having only two states (initial and final) and the transition function
will be parametered accordingly using a specific kind of signature :

-(~)->

The transition function could be translated with any but nothing, hence,
anything.

The produce automaton being :

^-(~)->$

Another variable part of this very basic automaton construction is related to
the group command. As stated in 1.1.3.2.1°, unary closure can be applied on
symbol entities of a regular grammar.

To summarize, a symbol, no matter its type (inclusive, exclusive or any)
produces automaton having :
- only two states (initial and final) and
- one transition function you need to pass in order to reach the final state
  from the initial state.
- One group command of type capturing for the group being constructed.

States may have the following form :
- Initial state is represented by the '^' character
- Final state is represented by '$' character.

When building an automaton from a symbol, the transition function is parametered
differently depending the type of the symbol :
- inclusive symbol recognizing only one letter gives a transition function of
  the form : -(x)-> , x being one letter.
- exclusive symbol ,recognizing all but specified letters gives a transition
  function of the form : -(~xyz)-> , ~ meaning 'all but' and x, y and z being
  specific letters
- any symbol type recognizing anny letter gives a transition function of the
  form : -(~)-> , ~ character followed by nothing meaning any letter.

Group command creation will be described in the related automaton algorithm.

      4.2.3.3°) Building an automaton from a group
      --------------------------------------------
As stated in 1.1.3° and sub-sequent sub sections, groups are features applying
closures on operands. Operands can be groups or symbols. As a result, they can
produce some complex automata.
Applying a closure trigger the use of a specific concept named 'epsilon
transition'. An epsilon transition can be used as argument in a transition
function and is used in place of a symbol definition. When an epsilon transition
is used as a transition function argument, it means : hey, you don't have any
specific requirement to go through this transition function, go ahead.
Let's call 'epsilon' the 'epsilon transition' used as argument inside a
transition function and let's call an 'epsilon transition' a transition function
parametered with an 'epsilon'; finally, let's call a 'transition function' a
well known transition function parametered with a symbol.
As a consequence, using such epsilon transitions transform a DFA into an NFA.
Hence, it is absolutely required to transform these epsilon transitions into
transition functions. The way to do that is very specific to the applied closure
and is described in each algorithm.
Moreover, applying a closure also triggers a side-effect related to group
command. Each closure type may add, alter or replace group commands associated
to a transition function either parametered with an epsilon transition or a
symbol.

      4.2.3.4°) Algorithm to create/alter automaton
      ---------------------------------------------
This section will document how automaton creation and alteration algorithms
works and how to use them efficiently.

        4.2.3.4.1°) Creating a new automaton
        ------------------------------------
The way to create a new automaton is by using a valid symbol definition. The
resulting automaton will be very basic, containing only two states, a transition
function and a group command. In spark, automaton are created at group level,
that is, when a group is defined.
Let's illustrate these facts by defining a simple grammar recognizing the 'a'
language :

BEGIN_SYMBOLS;
  a = a;
END_SYMBOLS;
BEGIN_GROUPS;
  a = a;
END_GROUPS;

Such a grammar could produce this group template instantiation :

// the group recognizing the entire language
group
  <
    // name of the group
    integral_sequence< char, 'a' >,
    // applying a one to one (no transformation) closure
    group_unary_closures, group_unary_closures::one_one,
    // the 'a' symbol, inclusive, representing the 'a' letter
    symbol
      <
        // name of the symbol
        integral_sequence< char, 'a' >,
        // inclusive symbol, one letter
        symbol_types::inclusive,
        // the letter recognized
        integral_sequence< char, 'a' >
      >
  > {};

With this group template instantiation, all that is necessary to build an
automaton from scratch is here :
- The symbol definition will be used in the transition function creation.
- Will be atached to this transition function two states
- The type of each state will be conditioned by the closure to apply at group
  level, but there is an initial and a final state, mandatory.
- The group created has a name that will be used to create a group command

        4.2.3.4.2°) Apply an unary closure algorithm
        --------------------------------------------

        4.2.3.4.3°) Apply a binary closure algorithm
        --------------------------------------------
